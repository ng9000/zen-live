// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

model User {
  id             String  @id @default(uuid())
  username       String  @unique
  imageUrl       String
  externalUserId String  @unique
  bio            String?

  following  Follow[] @relation("Following")
  followedBy Follow[] @relation("FollowedBy")

  blocking  Block[] @relation("Blocking")
  blockedBy Block[] @relation("BlockedBy")

  moderatorGivenTo Moderator[] @relation("Moderating")
  moderating       Moderator[] @relation("ModerationStatGivenBy")

  moderatingStream String[] @default([])

  stream Stream?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Follow {
  id          String @id @default(uuid())
  followerId  String
  followingId String
  follower    User   @relation(name: "Following", fields: [followerId], references: [id], onDelete: Cascade)
  following   User   @relation(name: "FollowedBy", fields: [followingId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
}

model Block {
  id        String @id @default(uuid())
  blockerId String
  blockedId String

  blocker User @relation(name: "Blocking", fields: [blockerId], references: [id], onDelete: Cascade)
  blocked User @relation(name: "BlockedBy", fields: [blockedId], references: [id], onDelete: Cascade)

  @@unique([blockerId, blockedId])
  @@index([blockerId])
  @@index([blockedId])
}

model Stream {
  id           String  @id @default(uuid())
  name         String
  thumbnailUrl String?

  ingressId String? @unique
  serverUrl String?
  streamKey String?

  isLive              Boolean @default(false)
  isChatEnabled       Boolean @default(true)
  isChatDelayed       Boolean @default(false)
  isChatFollowersOnly Boolean @default(false)

  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  // @@fulltext([name])

  @@index([userId])
  @@index([ingressId])
}

model Moderator {
  id                String @id @default(uuid())
  streamerId        String
  moderatorId       String
  moderatorUsername String

  moderatorGivenBy User @relation(name: "Moderating", fields: [streamerId], references: [id], onDelete: Cascade)
  moderator        User @relation(name: "ModerationStatGivenBy", fields: [moderatorId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@unique([streamerId, moderatorId])
  @@index([streamerId])
  @@index([moderatorId])
}
